// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/towelong/lin-cms-go/internal/service (interfaces: IGroupService)

// Package mockservice is a generated GoMock package.
package mockservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/towelong/lin-cms-go/internal/domain/model"
	router "github.com/towelong/lin-cms-go/pkg/router"
)

// MockIGroupService is a mock of IGroupService interface.
type MockIGroupService struct {
	ctrl     *gomock.Controller
	recorder *MockIGroupServiceMockRecorder
}

// MockIGroupServiceMockRecorder is the mock recorder for MockIGroupService.
type MockIGroupServiceMockRecorder struct {
	mock *MockIGroupService
}

// NewMockIGroupService creates a new mock instance.
func NewMockIGroupService(ctrl *gomock.Controller) *MockIGroupService {
	mock := &MockIGroupService{ctrl: ctrl}
	mock.recorder = &MockIGroupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGroupService) EXPECT() *MockIGroupServiceMockRecorder {
	return m.recorder
}

// GetGroupByLevel mocks base method.
func (m *MockIGroupService) GetGroupByLevel(arg0 int) (*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByLevel", arg0)
	ret0, _ := ret[0].(*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByLevel indicates an expected call of GetGroupByLevel.
func (mr *MockIGroupServiceMockRecorder) GetGroupByLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByLevel", reflect.TypeOf((*MockIGroupService)(nil).GetGroupByLevel), arg0)
}

// GetUserHasPermission mocks base method.
func (m *MockIGroupService) GetUserHasPermission(arg0 int, arg1 router.Meta) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHasPermission", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetUserHasPermission indicates an expected call of GetUserHasPermission.
func (mr *MockIGroupServiceMockRecorder) GetUserHasPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHasPermission", reflect.TypeOf((*MockIGroupService)(nil).GetUserHasPermission), arg0, arg1)
}
