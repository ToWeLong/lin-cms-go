// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/towelong/lin-cms-go/internal/service (interfaces: IGroupService)

// Package mockservice is a generated GoMock package.
package mockservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/towelong/lin-cms-go/internal/domain/dto"
	model "github.com/towelong/lin-cms-go/internal/domain/model"
	vo "github.com/towelong/lin-cms-go/internal/domain/vo"
	router "github.com/towelong/lin-cms-go/pkg/router"
)

// MockIGroupService is a mock of IGroupService interface.
type MockIGroupService struct {
	ctrl     *gomock.Controller
	recorder *MockIGroupServiceMockRecorder
}

// MockIGroupServiceMockRecorder is the mock recorder for MockIGroupService.
type MockIGroupServiceMockRecorder struct {
	mock *MockIGroupService
}

// NewMockIGroupService creates a new mock instance.
func NewMockIGroupService(ctrl *gomock.Controller) *MockIGroupService {
	mock := &MockIGroupService{ctrl: ctrl}
	mock.recorder = &MockIGroupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGroupService) EXPECT() *MockIGroupServiceMockRecorder {
	return m.recorder
}

// CheckGroupExistById mocks base method.
func (m *MockIGroupService) CheckGroupExistById(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGroupExistById", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckGroupExistById indicates an expected call of CheckGroupExistById.
func (mr *MockIGroupServiceMockRecorder) CheckGroupExistById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGroupExistById", reflect.TypeOf((*MockIGroupService)(nil).CheckGroupExistById), arg0)
}

// CheckGroupsExist mocks base method.
func (m *MockIGroupService) CheckGroupsExist(arg0 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGroupsExist", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckGroupsExist indicates an expected call of CheckGroupsExist.
func (mr *MockIGroupServiceMockRecorder) CheckGroupsExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGroupsExist", reflect.TypeOf((*MockIGroupService)(nil).CheckGroupsExist), arg0)
}

// CheckGroupsValid mocks base method.
func (m *MockIGroupService) CheckGroupsValid(arg0 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGroupsValid", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckGroupsValid indicates an expected call of CheckGroupsValid.
func (mr *MockIGroupServiceMockRecorder) CheckGroupsValid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGroupsValid", reflect.TypeOf((*MockIGroupService)(nil).CheckGroupsValid), arg0)
}

// CreateGroup mocks base method.
func (m *MockIGroupService) CreateGroup(arg0 dto.NewGroupDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockIGroupServiceMockRecorder) CreateGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockIGroupService)(nil).CreateGroup), arg0)
}

// DeleteGroup mocks base method.
func (m *MockIGroupService) DeleteGroup(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockIGroupServiceMockRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockIGroupService)(nil).DeleteGroup), arg0)
}

// GetAllGroups mocks base method.
func (m *MockIGroupService) GetAllGroups() []vo.Group {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroups")
	ret0, _ := ret[0].([]vo.Group)
	return ret0
}

// GetAllGroups indicates an expected call of GetAllGroups.
func (mr *MockIGroupServiceMockRecorder) GetAllGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroups", reflect.TypeOf((*MockIGroupService)(nil).GetAllGroups))
}

// GetGroupById mocks base method.
func (m *MockIGroupService) GetGroupById(arg0 int) (vo.GroupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupById", arg0)
	ret0, _ := ret[0].(vo.GroupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupById indicates an expected call of GetGroupById.
func (mr *MockIGroupServiceMockRecorder) GetGroupById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupById", reflect.TypeOf((*MockIGroupService)(nil).GetGroupById), arg0)
}

// GetGroupByLevel mocks base method.
func (m *MockIGroupService) GetGroupByLevel(arg0 int) (*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByLevel", arg0)
	ret0, _ := ret[0].(*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByLevel indicates an expected call of GetGroupByLevel.
func (mr *MockIGroupServiceMockRecorder) GetGroupByLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByLevel", reflect.TypeOf((*MockIGroupService)(nil).GetGroupByLevel), arg0)
}

// GetGroupByName mocks base method.
func (m *MockIGroupService) GetGroupByName(arg0 string) (model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByName", arg0)
	ret0, _ := ret[0].(model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByName indicates an expected call of GetGroupByName.
func (mr *MockIGroupServiceMockRecorder) GetGroupByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByName", reflect.TypeOf((*MockIGroupService)(nil).GetGroupByName), arg0)
}

// GetPageGroups mocks base method.
func (m *MockIGroupService) GetPageGroups(arg0 dto.BasePage) *vo.Page {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageGroups", arg0)
	ret0, _ := ret[0].(*vo.Page)
	return ret0
}

// GetPageGroups indicates an expected call of GetPageGroups.
func (mr *MockIGroupServiceMockRecorder) GetPageGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageGroups", reflect.TypeOf((*MockIGroupService)(nil).GetPageGroups), arg0)
}

// GetRootGroup mocks base method.
func (m *MockIGroupService) GetRootGroup() model.Group {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootGroup")
	ret0, _ := ret[0].(model.Group)
	return ret0
}

// GetRootGroup indicates an expected call of GetRootGroup.
func (mr *MockIGroupServiceMockRecorder) GetRootGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootGroup", reflect.TypeOf((*MockIGroupService)(nil).GetRootGroup))
}

// GetUserGroupByUserId mocks base method.
func (m *MockIGroupService) GetUserGroupByUserId(arg0 int) ([]model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroupByUserId", arg0)
	ret0, _ := ret[0].([]model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroupByUserId indicates an expected call of GetUserGroupByUserId.
func (mr *MockIGroupServiceMockRecorder) GetUserGroupByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroupByUserId", reflect.TypeOf((*MockIGroupService)(nil).GetUserGroupByUserId), arg0)
}

// GetUserHasPermission mocks base method.
func (m *MockIGroupService) GetUserHasPermission(arg0 int, arg1 router.Meta) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHasPermission", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetUserHasPermission indicates an expected call of GetUserHasPermission.
func (mr *MockIGroupServiceMockRecorder) GetUserHasPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHasPermission", reflect.TypeOf((*MockIGroupService)(nil).GetUserHasPermission), arg0, arg1)
}

// UpdateGroup mocks base method.
func (m *MockIGroupService) UpdateGroup(arg0 int, arg1 dto.UpdateGroupDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockIGroupServiceMockRecorder) UpdateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockIGroupService)(nil).UpdateGroup), arg0, arg1)
}
