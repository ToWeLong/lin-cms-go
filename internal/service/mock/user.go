// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/towelong/lin-cms-go/internal/service (interfaces: IUserService)

// Package mockservice is a generated GoMock package.
package mockservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/towelong/lin-cms-go/internal/domain/dto"
	model "github.com/towelong/lin-cms-go/internal/domain/model"
	vo "github.com/towelong/lin-cms-go/internal/domain/vo"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockIUserService) ChangePassword(arg0 int, arg1 dto.ChangePasswordDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockIUserServiceMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockIUserService)(nil).ChangePassword), arg0, arg1)
}

// ChangeUserPassword mocks base method.
func (m *MockIUserService) ChangeUserPassword(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword.
func (mr *MockIUserServiceMockRecorder) ChangeUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockIUserService)(nil).ChangeUserPassword), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockIUserService) CreateUser(arg0 dto.RegisterDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserServiceMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserService)(nil).CreateUser), arg0)
}

// CreateUsernamePasswordIdentity mocks base method.
func (m *MockIUserService) CreateUsernamePasswordIdentity(arg0 int, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsernamePasswordIdentity", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUsernamePasswordIdentity indicates an expected call of CreateUsernamePasswordIdentity.
func (mr *MockIUserServiceMockRecorder) CreateUsernamePasswordIdentity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsernamePasswordIdentity", reflect.TypeOf((*MockIUserService)(nil).CreateUsernamePasswordIdentity), arg0, arg1, arg2)
}

// DeleteUser mocks base method.
func (m *MockIUserService) DeleteUser(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIUserServiceMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIUserService)(nil).DeleteUser), arg0)
}

// GetRootUserId mocks base method.
func (m *MockIUserService) GetRootUserId() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootUserId")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRootUserId indicates an expected call of GetRootUserId.
func (mr *MockIUserServiceMockRecorder) GetRootUserId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootUserId", reflect.TypeOf((*MockIUserService)(nil).GetRootUserId))
}

// GetUserById mocks base method.
func (m *MockIUserService) GetUserById(arg0 int) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIUserServiceMockRecorder) GetUserById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIUserService)(nil).GetUserById), arg0)
}

// GetUserByUsername mocks base method.
func (m *MockIUserService) GetUserByUsername(arg0 string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockIUserServiceMockRecorder) GetUserByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockIUserService)(nil).GetUserByUsername), arg0)
}

// GetUserGroupByUserId mocks base method.
func (m *MockIUserService) GetUserGroupByUserId(arg0 int) []model.Group {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroupByUserId", arg0)
	ret0, _ := ret[0].([]model.Group)
	return ret0
}

// GetUserGroupByUserId indicates an expected call of GetUserGroupByUserId.
func (mr *MockIUserServiceMockRecorder) GetUserGroupByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroupByUserId", reflect.TypeOf((*MockIUserService)(nil).GetUserGroupByUserId), arg0)
}

// GetUserPageByGroupId mocks base method.
func (m *MockIUserService) GetUserPageByGroupId(arg0, arg1, arg2 int) (*vo.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPageByGroupId", arg0, arg1, arg2)
	ret0, _ := ret[0].(*vo.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPageByGroupId indicates an expected call of GetUserPageByGroupId.
func (mr *MockIUserServiceMockRecorder) GetUserPageByGroupId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPageByGroupId", reflect.TypeOf((*MockIUserService)(nil).GetUserPageByGroupId), arg0, arg1, arg2)
}

// GetUserPermissionsInfo mocks base method.
func (m *MockIUserService) GetUserPermissionsInfo(arg0 int) (vo.UserPermissionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermissionsInfo", arg0)
	ret0, _ := ret[0].(vo.UserPermissionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermissionsInfo indicates an expected call of GetUserPermissionsInfo.
func (mr *MockIUserServiceMockRecorder) GetUserPermissionsInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissionsInfo", reflect.TypeOf((*MockIUserService)(nil).GetUserPermissionsInfo), arg0)
}

// IsAdmin mocks base method.
func (m *MockIUserService) IsAdmin(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockIUserServiceMockRecorder) IsAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockIUserService)(nil).IsAdmin), arg0)
}

// UpdateProfile mocks base method.
func (m *MockIUserService) UpdateProfile(arg0 int, arg1 dto.UpdateInfoDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockIUserServiceMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIUserService)(nil).UpdateProfile), arg0, arg1)
}

// UpdateUserInfo mocks base method.
func (m *MockIUserService) UpdateUserInfo(arg0 int, arg1 dto.UpdateGroupsDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockIUserServiceMockRecorder) UpdateUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockIUserService)(nil).UpdateUserInfo), arg0, arg1)
}

// VerifyUser mocks base method.
func (m *MockIUserService) VerifyUser(arg0, arg1 string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockIUserServiceMockRecorder) VerifyUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockIUserService)(nil).VerifyUser), arg0, arg1)
}
